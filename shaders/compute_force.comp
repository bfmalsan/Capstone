#version 430

#define WORK_GROUP_SIZE 1024

layout (local_size_x = WORK_GROUP_SIZE) in;

// constants
#define NUM_PARTICLES 15000

#define PI_FLOAT 3.1415927410125732421875f
#define PARTICLE_RADIUS 0.005f
#define PARTICLE_RESTING_DENSITY 1000
// Mass = Density * Volume
#define PARTICLE_MASS 0.02
#define SMOOTHING_LENGTH (4 * PARTICLE_RADIUS)

#define PARTICLE_VISCOSITY 3000.f

// OpenGL y-axis is pointing up, while Vulkan y-axis is pointing down.
// So in OpenGL this is negative, but in Vulkan this is positive.
//9806.65
#define GRAVITY_FORCE vec2(0, -9806.65)

layout(std430, binding = 0) buffer position_block
{
    vec2 position[];
};

layout(std430, binding = 1) buffer velocity_block
{
    vec2 velocity[];
};

layout(std430, binding = 2) buffer force_block
{
    vec2 force[];
};

layout(std430, binding = 3) buffer density_block
{
    float density[];
};

layout(std430, binding = 4) buffer pressure_block
{
    float pressure[];
};

uniform vec3 mouse_pos;

void main()
{
    uint i = gl_GlobalInvocationID.x;  
    // compute all forces
    vec2 pressure_force = vec2(0, 0);
    vec2 viscosity_force = vec2(0, 0);
    
    for (uint j = 0; j < NUM_PARTICLES; j++)
    {
        if (i == j)
        {
            continue;
        }
        vec2 delta = position[i] - position[j];
        float r = length(delta);
        if (r < SMOOTHING_LENGTH)
        {
            pressure_force -= PARTICLE_MASS * (pressure[i] + pressure[j]) / (2.f * density[j]) *
            // gradient of spiky kernel
                -45.f / (PI_FLOAT * pow(SMOOTHING_LENGTH, 6)) * pow(SMOOTHING_LENGTH - r, 2) * normalize(delta);
            viscosity_force += PARTICLE_MASS * (velocity[j] - velocity[i]) / density[j] *
            // Laplacian of viscosity kernel
                45.f / (PI_FLOAT * pow(SMOOTHING_LENGTH, 6)) * (SMOOTHING_LENGTH - r);
        }
    }
	
	
    viscosity_force *= PARTICLE_VISCOSITY;
    vec2 external_force = density[i] * GRAVITY_FORCE;
	
	if(((position[i].x <= mouse_pos.x + mouse_pos.z)&&(position[i].x >= mouse_pos.x - mouse_pos.z))&&
		((position[i].y <= -mouse_pos.y + mouse_pos.z)&&(position[i].y >= -mouse_pos.y - mouse_pos.z))){
			//position[i].y = .5;
			//position[i].x = .5;
			vec2 mouse_force = vec2(1,1);
			external_force.x = density[i] *(external_force.x + mouse_force.x);
			external_force.y = density[i] *(external_force.y + mouse_force.y);
		
	}
	
	//external_force *= density[i];
	

    force[i] = pressure_force + viscosity_force + external_force;
}
