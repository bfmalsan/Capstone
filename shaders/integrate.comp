#version 430

#define WORK_GROUP_SIZE 1024

layout (local_size_x = WORK_GROUP_SIZE) in;

// constants
#define NUM_PARTICLES 15000

#define TIME_STEP 0.0001f
#define WALL_DAMPING 0.3f

layout(std430, binding = 0) buffer position_block
{
    vec2 position[];
};

layout(std430, binding = 1) buffer velocity_block
{
    vec2 velocity[];
};

layout(std430, binding = 2) buffer force_block
{
    vec2 force[];
};

layout(std430, binding = 3) buffer density_block
{
    float density[];
};

layout(std430, binding = 4) buffer pressure_block
{
    float pressure[];
};

uniform vec4 objectPos;


bool checkObject(vec2 nPos){
	if((nPos.x >= objectPos.x && nPos.x <= objectPos.y)&&(nPos.y >= objectPos.z && nPos.y <= objectPos.w)){
		return true;
	}

	return false;
}


void main()
{
    uint i = gl_GlobalInvocationID.x;

    // integrate
    vec2 acceleration = force[i] / density[i];
    vec2 new_velocity = velocity[i] + TIME_STEP * acceleration;
    vec2 new_position = position[i] + TIME_STEP * new_velocity;

    // boundary conditions
    if (new_position.x < -1)
    {
        new_position.x = -1.0;
        new_velocity.x *= -1 ;//* WALL_DAMPING;
    }
    else if (new_position.x > 1)
    {
        new_position.x = 1.0;
        new_velocity.x *= -1 ;//* WALL_DAMPING;
    }
    else if (new_position.y <= -1)
    {
        new_position.y = -1;
        new_velocity.y *= -1 * WALL_DAMPING;
    }
    else if (new_position.y > 1)
    {
        new_position.y = 1;
        new_velocity.y *= -1 * WALL_DAMPING;
    }
	
	else if(checkObject(new_position)){
		new_velocity.x *= -1 * WALL_DAMPING;
		new_velocity.y *= -1 * WALL_DAMPING;
	}


    velocity[i] = new_velocity;
    position[i] = new_position;
}
